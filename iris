import pandas as pd

df = pd.read_csv(('http://archive.ics.uci.edu/ml/'
                  'machine-learning-databases/iris/iris.data'),
                 header=None)
df.columns = ['sepal length', 'sepal width', 'petal length',
              'petal width', 'class']
print(df.shape)
df.head()
# preprocessing
dataset = df.values
X = dataset[:,:4].astype(float)
Y = dataset[:,4]

from keras.utils import np_utils
from sklearn.preprocessing import LabelEncoder

encoder = LabelEncoder()
encoder.fit(Y)
encoded_y = encoder.transform(Y)


dummy_y = np_utils.to_categorical(encoded_y)
pd.DataFrame(dummy_y).head()

# models

from keras.models import Sequential
from keras.layers import Dense
from keras.optimizers import SGD

def iris_model():
    model = Sequential()
    model.add(Dense(8, input_dim=4, activation='relu'))
    model.add(Dense(3, activation='softmax'))
    sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)
    model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])
    return model

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(X, dummy_y, test_size=0.1)

model = iris_model()

history = model.fit(x_train, y_train,batch_size=None, epochs=300,verbose=0,validation_data=(x_test, y_test))
score = model.evaluate(x_test, y_test, verbose=0, batch_size=None)
pd.DataFrame([history.history['loss'],
                history.history['val_loss']],
                index=['train', 'test']).T.plot(figsize=(15,5))

model.summary()

model.get_config()
model.layers
model.inputs
model.outputs
model.get_weights()

from sklearn.model_selection import ShuffleSplit
from keras.wrappers.scikit_learn import KerasClassifier
from sklearn.model_selection import cross_val_score, KFold

estimator = KerasClassifier(build_fn=iris_model,
                            epochs=300,
                            batch_size=None,
                            verbose=0)
rs = ShuffleSplit(n_splits=50, test_size=0.1, random_state=None)
results = cross_val_score(estimator, X, dummy_y, cv=rs)
results.mean()*100
results.std()*100
